name: Build SoapBoxx

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

# Add explicit permissions to fix 403 errors
permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build-windows:
    runs-on: windows-latest
    name: Build Windows Executable
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Install pyaudio (Windows)
      run: |
        pip install pyaudio
        
    - name: Clean previous build
      run: |
        if (Test-Path "dist") { Remove-Item -Recurse -Force "dist" }
        if (Test-Path "build") { Remove-Item -Recurse -Force "build" }
        
    - name: Create PyInstaller spec file
      run: |
        echo "Creating PyInstaller spec file..."
        python -m PyInstaller --onefile --windowed --name SoapBoxx --add-data "backend;backend" --add-data "frontend;frontend" --hidden-import "backend" --hidden-import "frontend" --hidden-import "PyQt6" --hidden-import "pyaudio" --hidden-import "openai" --hidden-import "whisper" --hidden-import "gtts" frontend/main_window.py
        
    - name: Build Windows executable
      run: |
        python -m PyInstaller SoapBoxx.spec
        
    - name: Check file size and verify build
      run: |
        if (Test-Path "dist/SoapBoxx.exe") {
          $size = (Get-Item "dist/SoapBoxx.exe").Length
          $sizeMB = [math]::Round($size / 1MB, 2)
          echo "Windows build size: $sizeMB MB"
          if ($size -lt 1000000) {
            echo "ERROR: Executable is too small - build may have failed"
            exit 1
          }
        } else {
          echo "ERROR: Executable not found - build failed"
          exit 1
        }
        
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: SoapBoxx-Windows
        path: dist/SoapBoxx.exe
        
  build-macos:
    runs-on: macos-latest
    name: Build macOS App
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Clean previous build
      run: |
        rm -rf dist/ build/
        
    - name: Create PyInstaller spec file
      run: |
        echo "Creating PyInstaller spec file..."
        python -m PyInstaller --onedir --name SoapBoxx --add-data "backend:backend" --add-data "frontend:frontend" --hidden-import "backend" --hidden-import "frontend" --hidden-import "PyQt6" --hidden-import "pyaudio" --hidden-import "openai" --hidden-import "whisper" --hidden-import "gtts" frontend/main_window.py
        
    - name: Build macOS app
      run: |
        python -m PyInstaller SoapBoxx.spec
        
    - name: Check file size
      run: |
        if [ -f "dist/SoapBoxx/SoapBoxx" ]; then
          size=$(stat -f%z "dist/SoapBoxx/SoapBoxx")
          sizeMB=$(echo "scale=2; $size/1024/1024" | bc)
          echo "macOS build size: $sizeMB MB"
          if [ $size -gt 2147483648 ]; then
            echo "Warning: File size exceeds 2GB limit"
          fi
        else
          echo "ERROR: Executable not found - build failed"
          exit 1
        fi
        
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: SoapBoxx-macOS
        path: dist/SoapBoxx/
        
  build-linux:
    runs-on: ubuntu-latest
    name: Build Linux Executable
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Clean previous build
      run: |
        rm -rf dist/ build/
        
    - name: Create PyInstaller spec file
      run: |
        echo "Creating PyInstaller spec file..."
        python -m PyInstaller --onefile --name SoapBoxx --add-data "backend:backend" --add-data "frontend:frontend" --hidden-import "backend" --hidden-import "frontend" --hidden-import "PyQt6" --hidden-import "pyaudio" --hidden-import "openai" --hidden-import "whisper" --hidden-import "gtts" frontend/main_window.py
        
    - name: Build Linux executable
      run: |
        python -m PyInstaller SoapBoxx.spec
        
    - name: Check file size
      run: |
        if [ -f "dist/SoapBoxx" ]; then
          size=$(stat -c%s "dist/SoapBoxx")
          sizeMB=$(echo "scale=2; $size/1024/1024" | bc)
          echo "Linux build size: $sizeMB MB"
          if [ $size -gt 2147483648 ]; then
            echo "Warning: File size exceeds 2GB limit"
          fi
        else
          echo "ERROR: Executable not found - build failed"
          exit 1
        fi
        
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: SoapBoxx-Linux
        path: dist/SoapBoxx
        
  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    name: Create GitHub Release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Check artifact sizes and filter large files
      run: |
        echo "Checking artifact sizes and filtering large files..."
        mkdir -p artifacts/release-files
        for file in artifacts/*/*; do
          if [ -f "$file" ]; then
            size=$(stat -c%s "$file")
            sizeMB=$(echo "scale=2; $size/1024/1024" | bc)
            filename=$(basename "$file")
            echo "$file: $sizeMB MB"
            
            if [ $size -gt 2147483648 ]; then
              echo "Warning: $file exceeds 2GB limit - excluding from release"
            else
              echo "Including $file in release"
              cp "$file" "artifacts/release-files/$filename"
            fi
          fi
        done
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: SoapBoxx ${{ github.event.inputs.version || github.ref_name }}
        body: |
          # SoapBoxx ${{ github.event.inputs.version || github.ref_name }}
          
          ## üéâ What's New
          
          **SoapBoxx** is a professional desktop podcast recording studio that transforms your computer into a powerful audio production hub.
          
          ## üöÄ Downloads
          
          ### Windows
          - **SoapBoxx.exe** - Standalone executable (no installation required)
          
          ## ‚ö†Ô∏è Windows Security Note
          
          **If you get permission errors on Windows:**
          1. **Right-click** the downloaded `SoapBoxx.exe`
          2. **Select "Properties"**
          3. **Check "Unblock"** at the bottom (if present)
          4. **Click "OK"**
          5. **Right-click** the file again
          6. **Select "Run as administrator"** (first time only)
          
          This is normal for executables downloaded from the internet on Windows.
          
          ### macOS
          - **SoapBoxx** - Native macOS application
          
          ### Linux
          - **SoapBoxx** - Linux executable (if under 2GB)
          
          ## ‚ö†Ô∏è Note on Large Files
          
          Some builds may exceed GitHub's 2GB file size limit. If you encounter download issues:
          1. Use the launcher-based distribution instead
          2. Build locally using the source code
          3. Check our documentation for alternative installation methods
          
          ## ‚ú® Features
          
          - üéôÔ∏è **Smart Recording Studio** with real-time audio
          - ü§ñ **AI-Powered Analysis** using OpenAI GPT-4
          - üìù **Automatic Question Extraction** from transcripts
          - üîç **Guest Research Tools** with web scraping
          - üìä **Quantitative Scoring** and feedback
          
          ## üîë Setup
          
          To use AI features, you'll need an OpenAI API key:
          1. Get your key from [OpenAI Platform](https://platform.openai.com/api-keys)
          2. Set environment variable: `OPENAI_API_KEY=your_key_here`
          
          ## üìñ Documentation
          
          Check the built-in help system or visit our documentation for detailed guides.
          
          ---
          
          **Built with ‚ù§Ô∏è using Python, PyQt6, and OpenAI**
        files: artifacts/release-files/*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
